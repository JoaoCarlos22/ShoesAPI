<div class="container">
    <main>
        <form action="/ShoesSystem/updCalcado/{{shoe._id}}" method="post">
            <section>
                <h2>Nome:</h2>
                <input type="text" id="name" value="{{shoe.name}}" readonly>
            </section>
            <section>
                <h2>Gênero:</h2>
                <input id="gender" name="gender" value="{{shoe.gender}}" readonly>
            </section>
            <section>
                <h2>Cor:</h2>
                <input type="text" id="color" name="color" value="{{shoe.color}}" readonly>
            </section>
            <section>
                <h2>Tamanho:</h2>
                <input type="text" id="size" name="size" value="{{shoe.size}}" readonly>
            </section>
            <section>
                <h2>Categoria:</h2>
                <input id="category" name="category" value="{{shoe.category.name}}" readonly>
            </section>
            <section>
                <h2>Marca:</h2>
                <input id="brand" name="brand" value= "{{shoe.brand}}" readonly>
            </section>
            <section>
                <h2>Fornecedores:</h2>
                <div class="supplier-cards" id="supplier-cards">
                     {{#each suppliers}}
                    <div class="card" data-id="{{this._id}}">
                        <input type="checkbox" id="supplier-{{this._id}}" name="suppliers[{{this._id}}][supplier]" value="{{this._id}}">
                        <label for="supplier-{{this._id}}">
                            <h3>{{this.name}}</h3>
                            <p>SubTotal:  <input class="unit-price" name="suppliers[{{this._id}}][subtotal]" id="suppliers-{{this._id}}[subtotal]"  value="R$ --"></p>
                            <p>Subquantidade: <input class="card-qtd" type="number" name="suppliers[{{this._id}}][subquantity]" id="suppliers-{{this._id}}[subquantity]" min="1" required></p>
                        </label>
                    </div>
                    {{/each}}
                </div>
                <small>Selecione um ou mais fornecedores</small>
            </section>
            <section>
                <h2>Preço total:</h2>
                <input type="text" id="price" name="price" placeholder="Preço total será calculado automaticamente" readonly required>
            </section>  
            <section>
                <h2>Quantidade total:</h2>
                <input type="number" id="quantity" name="quantity" value="{{shoe.totalQuantity}}" min="1" required>
            </section>                  
            <section>
                <div class="actions">
                    <button type="submit" class="btn btn-submit">Atualizar</button>
                    <button class="btn btn-back" onclick="window.location.href='/ShoesSystem/home'">Voltar</button>
                </div>
            </section>
        </form>  
    </main>
</div>

<script>
    const categorySelect = document.getElementById("category");
    const brandSelect = document.getElementById("brand");
    const supplierCards = document.getElementById("supplier-cards");
    const priceInput = document.getElementById("price");
    const quantityInput = document.getElementById("quantity");
    const submitButton = document.querySelector(".btn-submit");

    let supplierPrices = [];
    const initialTotalQuantity = parseInt("{{shoe.totalQuantity}}", 10) || 0;

    // Função para destacar os fornecedores escolhidos
    function highlightSelectedSuppliers() {
        const cards = supplierCards.querySelectorAll(".card");

        cards.forEach(card => {
            const checkbox = card.querySelector("input[type='checkbox']");
            // Alterna a classe 'selected' com base no estado do checkbox
            if (checkbox.checked) {
                card.classList.add("selected");
            } else {
                card.classList.remove("selected");
            }
        });
    }

    // Função para buscar preços com base na categoria e marca
    async function fetchPrices(category, brand) {
        if (!category || !brand) {
            updateSupplierPrices([]);
            return [];
        }

        try {
            const response = await fetch(`/ShoesSystem/getPrices?category=${category}&brand=${brand}`);
            if (response.ok) {
                const suppliers = await response.json(); // Recebe o array de objetos com preços
                return suppliers;
            } else {
                console.error("Erro ao buscar preços:", await response.text());
                return [];
            }
        } catch (error) {
            console.error("Erro ao buscar preços:", error);
            return [];
        }
    }

    // Função para atualizar os preços nos cards de fornecedores
    function updateSupplierPrices(suppliers) {
        const cards = supplierCards.querySelectorAll(".card");

        supplierPrices = suppliers.reduce((acc, supplier) => {
            acc[supplier.supplierId] = supplier.price; // Associa o preço ao ID do fornecedor
            return acc;
        }, {});

        cards.forEach(card => {
            const supplierId = card.dataset.id;
            const priceInput = card.querySelector(".unit-price");
            const subquantityInput = card.querySelector(".card-qtd");

            if (supplierPrices[supplierId]) {
                const unitPrice = supplierPrices[supplierId];
                card.setAttribute("data-unit-price", unitPrice);
                priceInput.value = `R$ ${unitPrice.toFixed(2)}`;
                subquantityInput.value = 1; // Define valor inicial
                subquantityInput.disabled = true; // Desabilita alteração sem selecionar o fornecedor
            } else {
                priceInput.value = "R$ --";
                subquantityInput.value = "";
                subquantityInput.disabled = true;
            }
        });
    }

    // Função para calcular e atualizar o preço total e a quantidade total
    function updateTotalPriceAndQuantity() {
        let totalPrice = 0;
        let totalQuantity = 0;

        const cards = supplierCards.querySelectorAll(".card");

        cards.forEach(card => {
            const checkbox = card.querySelector("input[type='checkbox']");
            const subquantityInput = card.querySelector(".card-qtd");

            if (checkbox.checked) {
                const supplierId = card.dataset.id;
                const unitPrice = supplierPrices[supplierId] || 0;
                const subquantity = parseInt(subquantityInput.value || 0, 10);

                totalPrice += unitPrice * subquantity;
                totalQuantity += subquantity;

                subquantityInput.disabled = false;
            } else {
                subquantityInput.disabled = true;
            }
        });

        priceInput.value = totalPrice.toFixed(2);
        calculatedTotalQuantity = totalQuantity; // Armazena a quantidade calculada
        quantityInput.value = Math.max(quantityInput.value, totalQuantity); // Garante que o valor não seja menor que o total calculado
        submitButton.disabled = totalQuantity === 0; // Desabilita botão se nenhum fornecedor for selecionado
    }

    // Função para verificar alterações manuais na quantidade total
    function handleQuantityInputChange() {
        const currentValue = parseInt(quantityInput.value || 0, 10);

        // Se o usuário tentar aumentar o valor acima do calculado sem selecionar fornecedores
    if (currentValue > calculatedTotalQuantity && calculatedTotalQuantity === 0) {
        alert("Você não pode aumentar a quantidade total sem selecionar fornecedores.");
        quantityInput.value = initialTotalQuantity; // Volta para o valor inicial de shoe.totalQuantity
    }
    }

    // Função para inicializar preços com base na categoria e marca do calçado
    async function initializePrices() {
        const initialCategory = "{{shoe.category._id}}"; // Valor inicial da categoria
        const initialBrand = "{{shoe.brand}}"; // Valor inicial da marca

        // Define a quantidade total inicial no campo quantityInput
         quantityInput.value = initialTotalQuantity;

        if (initialCategory && initialBrand) {
            try {
                const suppliers = await fetchPrices(initialCategory, initialBrand);
                updateSupplierPrices(suppliers);
                updateTotalPriceAndQuantity();
            } catch (error) {
                console.error("Erro ao inicializar os preços:", error);
            }
        }
    }

    // Eventos para atualizar preços ao mudar categoria ou marca
    categorySelect.addEventListener("change", async () => {
        const category = categorySelect.value;
        const brand = brandSelect.value;
        const suppliers = await fetchPrices(category, brand);
        updateSupplierPrices(suppliers);
        updateTotalPriceAndQuantity();
    });

    brandSelect.addEventListener("change", async () => {
        const category = categorySelect.value;
        const brand = brandSelect.value;
        const suppliers = await fetchPrices(category, brand);
        updateSupplierPrices(suppliers);
        updateTotalPriceAndQuantity();
    });

    supplierCards.addEventListener("change", event => {
        const card = event.target.closest(".card");
        if (card) updateTotalPriceAndQuantity();
    });

    quantityInput.addEventListener("input", handleQuantityInputChange);
    supplierCards.addEventListener("change", highlightSelectedSuppliers);

    // Inicializa os preços na primeira carga da página
    initializePrices();
</script>
