<div class="container">
    <main>
        <form action="/ShoesSystem/updCalcado/{{shoe._id}}" method="post">
            <section>
                <h2>Nome:</h2>
                <input type="text" id="name" value="{{shoe.name}}" readonly>
            </section>
            <section>
                <h2>Gênero:</h2>
                <input id="gender" name="gender" value="{{shoe.gender}}" readonly>
            </section>
            <section>
                <h2>Cor:</h2>
                <input type="text" id="color" name="color" value="{{shoe.color}}" readonly>
            </section>
            <section>
                <h2>Tamanho:</h2>
                <input type="text" id="size" name="size" value="{{shoe.size}}" readonly>
            </section>
            <section>
                <h2>Categoria:</h2>
                <input id="category" name="category" value="{{shoe.category.name}}" readonly>
            </section>
            <section>
                <h2>Marca:</h2>
                <input id="brand" name="brand" value= "{{shoe.brand}}" readonly>
            </section>
            <section>
                <h2>Fornecedores:</h2>
                <div class="supplier-cards" id="supplier-cards">
                     {{#each suppliers}}
                    <div class="card" data-id="{{this._id}}">
                        <input type="checkbox" id="supplier-{{this._id}}" name="suppliers[{{this._id}}][supplier]" value="{{this._id}}">
                        <label for="supplier-{{this._id}}">
                            <h3>{{this.name}}</h3>
                            <p>SubTotal:  <input class="unit-price" name="suppliers[{{this._id}}][subtotal]" id="suppliers-{{this._id}}[subtotal]"  value="R$ --" readonly></p>
                            <p>Subquantidade: <input class="card-qtd" type="number" name="suppliers[{{this._id}}][subquantity]" id="suppliers-{{this._id}}[subquantity]" min="1" required></p>
                        </label>
                    </div>
                    {{/each}}
                </div>
                <small>Selecione um ou mais fornecedores</small>
            </section>
            <section>
                <h2>Preço total:</h2>
                <input type="text" id="price" name="price" placeholder="Preço total será calculado automaticamente" readonly required>
            </section>  
            <section>
                <h2>Quantidade total:</h2>
                <input type="number" id="quantity" name="quantity" value="{{shoe.totalQuantity}}" min="1" required>
            </section>                  
            <section>
                <div class="actions">
                    <button type="submit" class="btn btn-submit">Atualizar</button>
                    <button class="btn btn-back" onclick="window.location.href='/ShoesSystem/home'">Voltar</button>
                </div>
            </section>
        </form>  
    </main>
</div>

<script>
// Inicializa variáveis
const categorySelect = document.getElementById("category");
const brandSelect = document.getElementById("brand");
const supplierCards = document.getElementById("supplier-cards");
const priceInput = document.getElementById("price");
const quantityInput = document.getElementById("quantity");
const submitButton = document.querySelector(".btn-submit");

let supplierPrices = {};
const initialTotalQuantity = parseInt("{{shoe.totalQuantity}}", 10) || 0;
const initialTotalPrice = parseFloat("{{shoe.totalPrice}}") || 0;

// Função para inicializar a página com os valores do banco
function initializePage() {
    priceInput.value = initialTotalPrice.toFixed(2);
    quantityInput.value = initialTotalQuantity;
    highlightSelectedSuppliers();
}

// Função para destacar fornecedores escolhidos
function highlightSelectedSuppliers() {
    const cards = supplierCards.querySelectorAll(".card");

    cards.forEach(card => {
        const checkbox = card.querySelector("input[type='checkbox']");
        if (checkbox.checked) {
            card.classList.add("selected");
        } else {
            card.classList.remove("selected");
        }
    });
}

// Atualiza o estado do botão de envio
function updateSubmitButtonState(anySelected) {
    const currentQuantity = parseInt(quantityInput.value, 10);
    const minimumQuantity = initialTotalQuantity;

    // Habilita o botão se houver fornecedores selecionados ou a quantidade total for reduzida
    submitButton.disabled = !(anySelected || currentQuantity < minimumQuantity);
}

// Atualiza os subtotais e mantém os valores iniciais se nenhum fornecedor for selecionado
function updateTotalPriceAndQuantity() {
    let totalPrice = 0;
    let totalQuantity = 0;
    let anySelected = false;

    const cards = supplierCards.querySelectorAll(".card");

    cards.forEach(card => {
        const checkbox = card.querySelector("input[type='checkbox']");
        const subquantityInput = card.querySelector(".card-qtd");
        const subtotalInput = card.querySelector(".unit-price");
        const unitPrice = parseFloat(card.getAttribute("data-unit-price")) || 0;

        if (checkbox.checked) {
            anySelected = true;
            const subquantity = parseInt(subquantityInput.value || 1, 10);
            const subtotal = unitPrice * subquantity;

            totalPrice += subtotal;
            totalQuantity += subquantity; // Soma quantidades dos fornecedores

            // Atualiza o subtotal no campo
            subtotalInput.value = `R$ ${subtotal.toFixed(2)}`;
            subquantityInput.disabled = false; // Habilita input de subquantidade
        } else {
            // Reinicia valores de campos desmarcados
            subtotalInput.value = "R$ --";
            subquantityInput.disabled = true;
            subquantityInput.value = 1;
        }
    });

    // Se nenhum fornecedor for selecionado, restaura os valores iniciais do banco
    if (!anySelected) {
        priceInput.value = initialTotalPrice.toFixed(2);
        quantityInput.value = initialTotalQuantity;
    } else {
        priceInput.value = totalPrice.toFixed(2);
        quantityInput.value = initialTotalQuantity + totalQuantity; // Soma ao valor inicial
    }

    // Atualiza o botão de envio apenas se a lógica permitir
    updateSubmitButtonState(anySelected);
}

// Função para buscar preços com base na categoria e marca
async function fetchPrices(category, brand) {
    if (!category || !brand) return [];
    try {
        const response = await fetch(`/ShoesSystem/getPrices?category=${category}&brand=${brand}`);
        if (response.ok) {
            return await response.json();
        } else {
            console.error("Erro ao buscar preços:", await response.text());
            return [];
        }
    } catch (error) {
        console.error("Erro ao buscar preços:", error);
        return [];
    }
}

// Função para atualizar os preços nos cards de fornecedores
function updateSupplierPrices(suppliers) {
    supplierPrices = suppliers.reduce((acc, supplier) => {
        acc[supplier.supplierId] = supplier.price; // Associa o preço ao ID do fornecedor
        return acc;
    }, {});

    const cards = supplierCards.querySelectorAll(".card");

    cards.forEach(card => {
        const supplierId = card.dataset.id;
        const priceInput = card.querySelector(".unit-price");
        const subquantityInput = card.querySelector(".card-qtd");

        if (supplierPrices[supplierId]) {
            const unitPrice = supplierPrices[supplierId];
            card.setAttribute("data-unit-price", unitPrice);
            priceInput.value = `R$ ${unitPrice.toFixed(2)}`;
            subquantityInput.disabled = true; // Desabilita alteração inicial
        } else {
            priceInput.value = "R$ --";
            subquantityInput.value = 1;
            subquantityInput.disabled = true;
        }
    });
}

// Impede o aumento da quantidade sem selecionar fornecedores
quantityInput.addEventListener("input", () => {
    const currentQuantity = parseInt(quantityInput.value, 10);
    const minimumQuantity = initialTotalQuantity;
    const anySelected = Array.from(supplierCards.querySelectorAll(".card input[type='checkbox']"))
        .some(checkbox => checkbox.checked);

    if (currentQuantity > minimumQuantity && !anySelected) {
        // Impede aumento se nenhum fornecedor estiver selecionado
        alert("Para aumentar a quantidade, selecione pelo menos um fornecedor.");
        quantityInput.value = minimumQuantity; // Restaura ao valor inicial
    } else {
        // Atualiza o botão de envio ao diminuir
        updateSubmitButtonState(true);
    }
});

// Eventos para atualizar os subtotais
supplierCards.addEventListener("input", event => {
    const card = event.target.closest(".card");
    if (card && event.target.classList.contains("card-qtd")) {
        updateTotalPriceAndQuantity();
    }
});

// Evento para resetar o preço ao selecionar ou desmarcar fornecedores sem resetar a quantidade inicial
supplierCards.addEventListener("change", () => {
    updateTotalPriceAndQuantity();
    highlightSelectedSuppliers();
});

// Inicializa a página com valores do banco
initializePage();

// Função para inicializar preços com base na categoria e marca
async function initializePrices() {
    const initialCategory = "{{shoe.category._id}}";
    const initialBrand = "{{shoe.brand}}";

    if (initialCategory && initialBrand) {
        try {
            const suppliers = await fetchPrices(initialCategory, initialBrand);
            updateSupplierPrices(suppliers);
            updateTotalPriceAndQuantity();
        } catch (error) {
            console.error("Erro ao inicializar os preços:", error);
        }
    }
}

// Inicializa preços na primeira carga
initializePrices();
</script>
