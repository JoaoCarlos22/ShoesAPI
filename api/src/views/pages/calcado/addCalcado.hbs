<div class="container">
    <main>
        <form action="/ShoesSystem/addCalcado" method="post">
            <section>
                <h2>Nome:</h2>
                <input type="text" id="name" name="name" placeholder="Digite o nome do calçado" required>
            </section>
            <section>
                <h2>Gênero:</h2>
                <select name="gender" id="gender" required>
                    <option value="">Selecione um gênero</option>
                    <option value="Feminino">Feminino</option>
                    <option value="Masculino">Masculino</option>
                </select>
            </section>
            <section>
                <h2>Cor:</h2>
                <input type="text" id="color" name="color" placeholder="Digite a cor do calçado" required>
            </section>
            <section>
                <h2>Tamanho:</h2>
                <input type="text" id="size" name="size" placeholder="Digite o tamanho do calçado" required>
            </section>
            <section>
                <h2>Categoria:</h2>
                <select name="category" id="category" required>
                    <option value="">Selecione uma categoria</option>
                    {{#each categories}}
                    <option value="{{this._id}}">{{this.name}}</option>
                    {{/each}}
                </select>
            </section>
            <section>
                <h2>Marca:</h2>
                <select name="brand" id="brand" required>
                    <option value="">Selecione uma marca</option>
                    <option value="Sapatinho de Luxo">Sapatinho de Luxo</option>
                    <option value="Vizzano">Vizzano</option>
                    <option value="Olympikus">Olympikus</option>
                    <option value="Rider">Rider</option>
                </select>
            </section>
            <section>
                <h2>Fornecedores:</h2>
                <div class="supplier-cards" id="supplier-cards">
                     {{#each suppliers}}
                    <div class="card" data-id="{{this._id}}">
                        <input type="checkbox" id="supplier-{{this._id}}" name="suppliers[{{this._id}}][supplier]" value="{{this._id}}">
                        <label for="supplier-{{this._id}}">
                            <h3>{{this.name}}</h3>
                            <p>SubTotal:  <input class="unit-price" id="suppliers[{{this._id}}][subtotal]"  value="R$ --"></p>
                            <p>Subquantidade: <input class="card-qtd" type="number" name="suppliers[{{this._id}}][subquantity]" id="suppliers-{{this._id}}[subquantity]" min="1" required></p>
                        </label>
                    </div>
                    {{/each}}
                </div>
                <small>Selecione um ou mais fornecedores</small>
            </section>
            <section>
                <h2>Preço total:</h2>
                <input type="text" id="price" name="price" placeholder="Preço total será calculado automaticamente" readonly required>
            </section>  
            <section>
                <h2>Quantidade total:</h2>
                <input type="number" id="quantity" name="quantity" min="1" placeholder="Quantidade total será calculada automaticamente" required readonly>
            </section>                  
            <section>
                <div class="actions">
                    <button type="submit" class="btn btn-submit">Adicionar</button>
                    <button type="button" class="btn btn-clear" id="clear-form">Limpar</button>
                    <button class="btn btn-back" onclick="window.location.href='/ShoesSystem/home'">Voltar</button>
                </div>
            </section>
        </form>  
    </main>
</div>

<script>
    const categorySelect = document.getElementById("category");
    const brandSelect = document.getElementById("brand");
    const supplierCards = document.getElementById("supplier-cards");
    const priceInput = document.getElementById("price");
    const quantityInput = document.getElementById("quantity");

    // Variável para armazenar preços dos fornecedores globalmente
    let supplierPrices = [];

    // Função para destacar os fornecedores escolhidos
    function highlightSelectedSuppliers() {
        const cards = supplierCards.querySelectorAll(".card");

        cards.forEach(card => {
            const checkbox = card.querySelector("input[type='checkbox']");
            // Alterna a classe 'selected' com base no estado do checkbox
            if (checkbox.checked) {
                card.classList.add("selected");
            } else {
                card.classList.remove("selected");
            }
        });
    }

    // Função para buscar preços atualizados
    async function fetchPrices() {
        const category = categorySelect.value;
        const brand = brandSelect.value;

        if (!category || !brand) {
            updateSupplierPrices([]);
            return [];
        }

        try {
            const response = await fetch(`/ShoesSystem/getPrices?category=${category}&brand=${brand}`);
            if (response.ok) {
                const suppliers = await response.json(); // Recebe o array de objetos com os preços
                return suppliers;
            } else {
                console.error("Erro ao buscar preços:", await response.text());
                return [];
            }
        } catch (error) {
            console.error("Erro ao buscar preços:", error);
            return [];
        }
    }

    // Função para buscar preços e atualizar cards
    async function fetchUpdatedPrices() {
        try {
            supplierPrices = await fetchPrices();
            updateSupplierPrices(supplierPrices);
        } catch (error) {
            console.error("Erro ao atualizar preços:", error);
        }
    }

    // Função para atualizar os preços nos cards
    function updateSupplierPrices(suppliers) {
        const cards = supplierCards.querySelectorAll(".card");

        supplierPrices = suppliers.reduce((acc, supplier) => {
            acc[supplier.supplierId] = supplier.price; // Associa o preço ao ID do fornecedor
            return acc;
        }, {});

        cards.forEach(card => {
            const supplierId = card.dataset.id;
            const priceInput = card.querySelector(".unit-price");
            const subquantityInput = card.querySelector(".card-qtd");

            if (supplierPrices[supplierId]) {
                const unitPrice = supplierPrices[supplierId];
                card.setAttribute("data-unit-price", unitPrice);
                priceInput.value = `R$ ${unitPrice.toFixed(2)}`;
                subquantityInput.value = 1; // Define valor inicial
                subquantityInput.disabled = true; // Desabilita alteração sem selecionar o fornecedor
            } else {
                priceInput.value = "R$ --";
                subquantityInput.value = "";
                subquantityInput.disabled = true;
            }
        });
    }

    // Função para atualizar o subtotal de um fornecedor
    function updateSubtotal(card) {
        const supplierId = card.dataset.id;
        const subquantityInput = card.querySelector(".card-qtd");
        const subtotalInput = card.querySelector(".unit-price"); // Agora é um input
        const unitPrice = supplierPrices[supplierId] || 0;
        const subquantity = parseInt(subquantityInput.value || 0, 10);
        const subtotal = unitPrice * subquantity;

        subtotalInput.value = `R$ ${subtotal.toFixed(2)}`; // Atualiza o valor do input
        updateTotalPriceAndQuantity();
    }

    // Função para calcular e atualizar o preço total e a quantidade total
    function updateTotalPriceAndQuantity() {
        let totalPrice = 0;
        let totalQuantity = 0;

        const cards = supplierCards.querySelectorAll(".card");

        cards.forEach(card => {
            const checkbox = card.querySelector("input[type='checkbox']");
            const subquantityInput = card.querySelector(".card-qtd");

            if (checkbox.checked) {
                const supplierId = card.dataset.id;
                const unitPrice = supplierPrices[supplierId] || 0;
                const subquantity = parseInt(subquantityInput.value || 0, 10);

                totalPrice += unitPrice * subquantity;
                totalQuantity += subquantity;

                subquantityInput.disabled = false;
            } else {
                subquantityInput.disabled = true;
            }
        });

        priceInput.value = totalPrice.toFixed(2);
        quantityInput.value = totalQuantity;

        // Desabilita botão de submeter caso não haja fornecedores selecionados
        document.querySelector(".btn-submit").disabled = totalQuantity === 0;
    }

    // Eventos para atualizar os preços ao mudar categoria ou marca
    categorySelect.addEventListener("change", fetchUpdatedPrices);
    brandSelect.addEventListener("change", fetchUpdatedPrices);
    supplierCards.addEventListener("change", highlightSelectedSuppliers);

    // Eventos para habilitar/atualizar o subtotal ao selecionar fornecedores
    supplierCards.addEventListener("change", event => {
        const card = event.target.closest(".card");
        if (card) updateSubtotal(card);
    });

    // Evento para atualizar o subtotal ao alterar a subquantidade
    supplierCards.addEventListener("input", event => {
        if (event.target.classList.contains("card-qtd")) {
            const card = event.target.closest(".card");
            updateSubtotal(card);
        }
    });
</script>
